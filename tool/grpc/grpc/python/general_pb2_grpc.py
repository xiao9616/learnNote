# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import general_pb2 as general__pb2


class GeneralStub(object):
  """编译生产可执行文件
  python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. general.proto
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.messageHandle = channel.unary_unary(
        '/General/messageHandle',
        request_serializer=general__pb2.Request.SerializeToString,
        response_deserializer=general__pb2.Reply.FromString,
        )
    self.messageStreamHandle = channel.stream_stream(
        '/General/messageStreamHandle',
        request_serializer=general__pb2.Request.SerializeToString,
        response_deserializer=general__pb2.Reply.FromString,
        )


class GeneralServicer(object):
  """编译生产可执行文件
  python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. general.proto
  """

  def messageHandle(self, request, context):
    """简单的一次请求，一次应对
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def messageStreamHandle(self, request_iterator, context):
    """双向 请求参数流传输，返回结果流传输
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GeneralServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'messageHandle': grpc.unary_unary_rpc_method_handler(
          servicer.messageHandle,
          request_deserializer=general__pb2.Request.FromString,
          response_serializer=general__pb2.Reply.SerializeToString,
      ),
      'messageStreamHandle': grpc.stream_stream_rpc_method_handler(
          servicer.messageStreamHandle,
          request_deserializer=general__pb2.Request.FromString,
          response_serializer=general__pb2.Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'General', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
